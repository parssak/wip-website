{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["pdfName","completionRatio","pdfQuality","window","app","fadeInAnimation","keyframes","fadeIn","pulseAnimation","pulse","PulseDiv","styled","div","FadeDiv","invertImage","imageURL","a","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","querySelector","ctx","getContext","width","height","drawImage","imageData","getImageData","data","i","length","Math","abs","ma","mb","mc","md","me","mf","mg","mh","mi","thr","floor","h","d","b","place","y","x","ir","ig","ib","putImageData","toDataURL","src","invertPdfPages","pdfDocument","imageArray","rotate","scale","numPages","canvasEl","createElement","getPage","page","rotation","dpRatio","devicePixelRatio","adjustedScale","viewport","getViewport","canvasContext","style","render","promise","invertedURL","console","log","push","determineOrientation","getElementById","imagesToPDF","orientation","doc","jsPDF","addPage","setPage","imgData","internal","pageSize","getWidth","getHeight","setFillColor","rect","addImage","documentName","webkit","messageHandlers","getDocumentName","postMessage","concat","base64","fileReader","FileReader","blobPDF","Blob","output","type","readAsDataURL","fileLoadedEvent","target","result","save","getDataUrlFromFile","file","reader","addEventListener","slice","PdfPreview","props","useState","canvasRef","useRef","setScale","progress","setProgress","buttonText","setButtonText","usePdf","dataUrl","workerSrc","pdfPage","useEffect","undefined","current","generateDark","finalBase64","openDocument","className","id","onClick","onCancelClick","ref","b64toBlob","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","blob","App","setDataUrl","quality","setQuality","base64Data","setBase64Data","recieveDataFromSwift","baseData","fileName","jsError","blobUrl","URL","createObjectURL","substr","htmlFor","onChange","evt","files","name","substring","lastIndexOf","newDataUrl","accept","marginTop","marginLeft","textAlign","marginRight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"yjBAsBA,IAAIA,EAAU,GAGVC,EAAkB,EAClBC,EAAa,GAGjBC,OAAOC,SAAM,EAGb,IAAMC,EAAkBC,YAAH,IAAeC,UAC9BC,EAAiBF,YAAH,IAAeG,SAC7BC,EAAWC,IAAOC,IAAV,IACMJ,GAGdK,EAAUF,IAAOC,IAAV,IACKP,G,SAOHS,E,8EAAf,WAA2BC,GAA3B,SAAAC,EAAA,+EACS,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAM,IAAIC,MACdD,EAAIE,YAAc,GAClBF,EAAIG,OAUJ,WACE,IAAIC,EAASC,SAASC,cAAc,gBAEhCC,EAAMH,EAAOI,WAAW,MAE5BJ,EAAOK,MAAQT,EAAIS,MAEnBL,EAAOM,OAASV,EAAIU,OACpBH,EAAII,UAAUX,EAAK,EAAG,GAMtB,IAHA,IAAIY,EAAYL,EAAIM,aAAa,EAAG,EAAGT,EAAOK,MAAOL,EAAOM,QACxDI,EAAOF,EAAUE,KAEZC,EAAE,EAAGA,EAAED,EAAKE,OAAQD,GAAG,EAC9BD,EAAKC,EAAI,GAAKE,KAAKC,IAAIJ,EAAKC,EAAI,GAAK,KACrCD,EAAKC,EAAI,GAAKE,KAAKC,IAAIJ,EAAKC,EAAI,GAAK,KACrCD,EAAKC,EAAI,GAAKE,KAAKC,IAAIJ,EAAKC,EAAI,GAAK,KAIvC,IAMII,EAAIC,EAAIC,EACRC,EAAIC,EAAIC,EACRC,EAAIC,EAAIC,EALNC,EAAMX,KAAKY,MADNC,KAELC,EAFKD,IAEIF,EACTI,EAAI,EAAID,EAKd,OAAQH,GACN,KAAK,EACHT,EAAKa,EACLZ,EAAK,EACLC,EAAKU,EACLT,EAAKS,EACLR,EAAKS,EACLR,EAAK,EACLC,EAAK,EACLC,EAAKK,EACLJ,EAAKK,EACL,MACF,KAAK,EACHb,EAAK,EACLC,EAAKW,EACLV,EAAKW,EACLV,EAAKU,EACLT,EAAK,EACLC,EAAKO,EACLN,EAAKM,EACLL,EAAKM,EACLL,EAAK,EACL,MACF,KAAK,EACHR,EAAKY,EACLX,EAAKY,EACLX,EAAK,EACLC,EAAK,EACLC,EAAKQ,EACLP,EAAKQ,EACLP,EAAKO,EACLN,EAAK,EACLC,EAAKI,EAMT,IAFA,IAAIE,EAAQ,EAEHC,EAAI,EAAGA,EAAI9B,EAAOM,SAAUwB,EAEnC,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAOK,QAAS0B,EAAG,CAErCF,EAAQ,GAAKC,EAAI9B,EAAOK,MAAQ0B,GAEhC,IAAMC,EAAKtB,EAAKmB,EAAQ,GAClBI,EAAKvB,EAAKmB,EAAQ,GAClBK,EAAKxB,EAAKmB,EAAQ,GAExBnB,EAAKmB,EAAQ,GAAKhB,KAAKY,MAAMV,EAAKiB,EAAKhB,EAAKiB,EAAKhB,EAAKiB,GACtDxB,EAAKmB,EAAQ,GAAKhB,KAAKY,MAAMP,EAAKc,EAAKb,EAAKc,EAAKb,EAAKc,GACtDxB,EAAKmB,EAAQ,GAAKhB,KAAKY,MAAMJ,EAAKW,EAAKV,EAAKW,EAAKV,EAAKW,GAI1D/B,EAAIgC,aAAa3B,EAAW,EAAG,GAU/Bd,EAAQM,EAAOoC,UAAU,aAAc1D,KAxGzCkB,EAAIyC,IAAM9C,MALd,4C,+BA0He+C,E,8EAAf,WAA8BC,GAA9B,qCAAA/C,EAAA,sDACMgD,EAAa,GACXC,EAAS,EACTC,EAAQ,EAEL/B,EAAI,EALf,YAKkBA,GAAK4B,EAAYI,UALnC,wBAMUC,EAAW3C,SAAS4C,cAAc,UAN5C,SAOuBN,EAAYO,QAAQnC,GAP3C,cAOUoC,EAPV,OASUC,EAAsB,IAAXP,EAAeM,EAAKN,OAASM,EAAKN,OAASA,EACtDQ,EAAUtE,OAAOuE,iBACjBC,EAAgBT,EAAQO,EACxBG,EAAWL,EAAKM,YAAY,CAAEX,MAAOS,EAAeH,aAEpDM,EAAgBV,EAASxC,WAAW,MAE1CwC,EAASW,MAAMlD,MAAf,UAA0B+C,EAAS/C,MAAQ4C,EAA3C,MACAL,EAASW,MAAMjD,OAAf,UAA2B8C,EAAS9C,OAAS2C,EAA7C,MACAL,EAAStC,OAAS8C,EAAS9C,OAC3BsC,EAASvC,MAAQ+C,EAAS/C,MAnB9B,UAqBU0C,EAAKS,OAAO,CAChBF,gBACAF,aACCK,QAxBP,yBA0B4BnE,EAAYsD,EAASR,aA1BjD,QA0BQsB,EA1BR,OA4BIjF,EAAmBkC,EAAI4B,EAAYI,SAAY,IAC/CgB,QAAQC,IAAInF,GACMwB,SAAS4C,cAAc,OAE/BR,IAAMqB,EAGhBlB,EAAWqB,KAAKH,GAnCpB,QAK6C/C,IAL7C,gDAsCS6B,GAtCT,6C,+BAyCesB,I,2EAAf,8BAAAtE,EAAA,yDACMQ,EAASC,SAAS8D,eAAe,iBAEjC1D,EAAQL,EAAOK,QAENL,EAAOM,QACND,GANhB,yCAOW,KAPX,gCAQgB,KARhB,4C,+BAgBe2D,E,gFAAf,WAA2BxB,EAA2ByB,GAAtD,SAAAzE,EAAA,+EACS,IAAIC,SAAQ,SAAAC,GAIjB,IAFA,IAAIwE,EAAM,IAAIC,IAAMF,EAAa,MAExBtD,EAAI,EAAGA,EAAI6B,EAAW5B,OAAQD,IAAK,CACtCA,IAAM6B,EAAW5B,OAAS,GAAGsD,EAAIE,UAErCF,EAAIG,QAAQ1D,EAAE,GACd,IAAM2D,EAAU9B,EAAW7B,GAErBN,EAAQ6D,EAAIK,SAASC,SAASC,WAC9BnE,EAAS4D,EAAIK,SAASC,SAASE,YAErCR,EAAIS,aAAa,WACjBT,EAAIU,KAAK,EAAG,EAAGvE,EAAOC,GAEtB4D,EAAIW,SAASP,EAAS,EAAG,EAAGjE,EAAOC,GAGrC,IAAIwE,EAAetG,EAKfG,OAAOoG,QAETpG,OAAOoG,OAAOC,gBAAgBC,gBAAgBC,YAAYJ,EAAaK,OAAO,SAGhF,IACIC,EADAC,EAAa,IAAIC,WAEjBC,EAAU,IAAIC,KAAK,CAACtB,EAAIuB,OAAO,SAAU,CAACC,KAAO,oBAErDL,EAAWM,cAAcJ,GACzBF,EAAWtF,OAAS,SAAS6F,GAE3BR,EAASQ,EAAgBC,OAAOC,OAChCpG,EAAQ0F,GAEHzG,OAAOoG,QACVb,EAAI6B,KAAKjB,EAAaK,OAAO,cAzCrC,4C,sBAmDA,SAASa,EAAmBC,GAE1B,OADAtC,QAAQC,IAAIqC,GACL,IAAIxG,SAAQ,SAAAC,GACjB,IAAMwG,EAAS,IAAIZ,WACnBY,EAAOC,iBAAiB,QAAQ,WAEfD,EAAOJ,OAAOM,MAAM,IACnCzC,QAAQC,IAAI,WACZlE,EAAQwG,EAAOJ,WACd,GACHI,EAAOP,cAAcM,MAIzB,SAASI,EAAWC,GAAQ,IAAD,EACDC,mBAAS,GADR,mBAClBxD,EADkB,KAEnByD,GAFmB,KAEPC,iBAAiC,OAF1B,EAGCF,mBAAS,GAHV,mBAGlB7D,EAHkB,KAGXgE,EAHW,OAIOH,mBAAS,GAJhB,mBAIlBI,EAJkB,KAIRC,EAJQ,OAKWL,mBAAS,eALpB,mBAKlBM,EALkB,KAKNC,EALM,OAOMC,YAAO,CACpCd,KAAMK,EAAMU,QACZjE,OACAyD,YACAS,UAAW,sEACXvE,MAAOA,IALHH,EAPmB,EAOnBA,YAPmB,EAON2E,QA8BnB,OArBAC,qBAAU,gBACYC,IAAhB7E,GAA6BiE,EAAUa,SACrCb,EAAUa,QAAQhH,OAAS,KAC7BqG,EAAS,MAMf/H,OAAO2I,aAAP,sBAAsB,gCAAA9H,EAAA,sEACMsE,IADN,cACdG,EADc,gBAEK3B,EAAeC,GAFpB,cAEdC,EAFc,gBAGMwB,EAAYxB,EAAYyB,GAH9B,OAGdsD,EAHc,OAMhB5I,OAAOoG,QAETpG,OAAOoG,OAAOC,gBAAgBwC,aAAatC,YAAYqC,GARrC,4CAalB,gCACIhF,EACI,wBAAQkF,UAAW,qBACXC,GAAI,iBACJC,QAAO,sBAAE,gCAAAnI,EAAA,6DACPsH,EAAc,iBADP,SAEmBhD,IAFnB,cAEDG,EAFC,gBAGkB3B,EAAeC,GAHjC,cAGDC,EAHC,gBAImBwB,EAAYxB,EAAYyB,GAJ3C,OAIDsD,EAJC,OAKgB,KAAnB9I,GACFqI,EAAc,cAGZnI,OAAOoG,QAETpG,OAAOoG,OAAOC,gBAAgBwC,aAAatC,YAAYqC,GAXlD,4CAFjB,SAgBYV,IAjBF,KAmBdtE,EAAqB,cAAClD,EAAD,UAAS,wBAAQoI,UAAW,UACXC,GAAI,cACJC,QAAU,WACRrB,EAAMsB,iBAHhB,uBAAhB,KAKhB,gCACGjB,GAAYlI,EAAkBmI,EAAYnI,GAAmB,KAC9D,wBAAQoJ,IAAKrB,EAAWkB,GAAI,qBAE9B,8BACE,wBAAQA,GAAG,qBAqBrB,IAAMI,EAAY,SAACC,GAIjB,IAJ6D,IAAnCC,EAAkC,uDAAtB,GAAIC,EAAkB,uDAAR,IAC9CC,EAAiBC,KAAKJ,GACtBK,EAAa,GAEVC,EAAS,EAAGA,EAASH,EAAetH,OAAQyH,GAAUJ,EAAW,CAIxE,IAHA,IAAM7B,EAAQ8B,EAAe9B,MAAMiC,EAAQA,EAASJ,GAE9CK,EAAc,IAAIC,MAAMnC,EAAMxF,QAC3BD,EAAI,EAAGA,EAAIyF,EAAMxF,OAAQD,IAChC2H,EAAY3H,GAAKyF,EAAMoC,WAAW7H,GAGpC,IAAM8H,EAAY,IAAIC,WAAWJ,GAEjCF,EAAWvE,KAAK4E,GAGlB,IAAME,EAAO,IAAInD,KAAK4C,EAAY,CAAC1C,KAAMsC,IACzC,OAAOW,GAyGMC,MAtGf,WAAgB,IAAD,EACiBrC,mBAAS,MAD1B,mBACNS,EADM,KACG6B,EADH,OAEiBtC,oBAAS,GAF1B,mBAENuC,EAFM,KAEGC,EAFH,OAGuBxC,mBAAS,MAHhC,mBAGNyC,EAHM,KAGMC,EAHN,KAyBb,OAnBAtK,OAAOuK,qBAAP,uCAA8B,WAAOC,EAAUC,GAAjB,SAAA5J,EAAA,sDAC5BhB,EAAU4K,EAEVzK,OAAOoG,OAAOC,gBAAgBqE,QAAQnE,YAAY,oBAClD+D,EAAcE,GAJc,2CAA9B,wDAQAhC,oBAAS,sBAAC,8BAAA3H,EAAA,sDACW,OAAfwJ,GAAkC,MAAXhC,IACnB2B,EAAOb,EAAUkB,EAAY,mBAC7BM,EAAUC,IAAIC,gBAAgBb,GAEpChK,OAAOoG,OAAOC,gBAAgBqE,QAAQnE,YAAYoE,EAAQG,OAAO,EAAGH,EAAQ1I,OAAS,KAErFiI,EAAWS,IAPL,4CAYN,gCACE,sBAAK7B,UAAW,UAAhB,UACE,4CACA,uCACA,wBAAQA,UAAW,qBACXC,GAAI,gBACJC,QAAU,WACRoB,GAAYD,GACZpK,EAAaoK,EAAU,GAAM,IAJvC,SAKYA,EAAU,eAAiB,mBAExC9B,EAAU,KAAO,wBAAO0C,QAAQ,cAAcjC,UAAU,qBAAvC,UAChB,mBAAGA,UAAU,uBADG,iBAGlB,uBAAOC,GAAG,cAAahC,KAAK,OACrBiE,SAAQ,uCAAE,WAAOC,GAAP,iBAAApK,EAAA,2DACFqK,EAAQD,EAAI/D,OAAOgE,OAGfjJ,OAJF,uBAOFiJ,GACFlG,QAAQC,IAAIiG,EAAM,IAGpBrL,EAAUqL,EAAM,GAAGC,KAAKC,UAAU,EAAGF,EAAM,GAAGC,KAAKE,YAAY,MAXzD,SAcmBhE,EAAmB6D,EAAM,IAd5C,OAcAI,EAdA,OAiBNpB,EAAWoB,GAjBL,2CAAF,sDAoBRC,OAAO,oBAEblD,EAAU,cAACX,EAAD,CAAYW,QAASA,EAASY,cAAgB,WACvDiB,EAAW,MACXI,EAAc,SAGV,KAGJjC,EAsBkB,KAtBR,cAAC9H,EAAD,UAAU,sBAAKuI,UAAW,YAAhB,UACpB,qBAAIlE,MAAO,CACT4G,UAAW,GACXC,WAAY,IAFd,oBAGU,0CAHV,YAIA,qBAAI7G,MAAO,CACT4G,UAAW,IACXE,UAAW,QACXD,WAAY,IACZE,YAAa,IAJf,wBAKc,uBALd,aAK6B,uBAL7B,gBAMA,sBACI/G,MAAO,CAAC8G,UAAW,QACjBF,WAAY,GACZC,WAAY,IACZE,YAAa,IACf5C,GAAI,eALR,0BAMA,oBAAInE,MAAO,CACT4G,UAAW,EACXE,UAAW,QACXD,WAAY,IACZE,YAAa,IAJf,8BAMF,qBAAK7C,UAAW,YAAhB,SACE,qBAAKC,GAAI,UAAT,SACE,qCAAO,sBAAMA,GAAI,YAAV,yBAAP,YAAyD,uBAAzD,OAAkE,sBAAMA,GAAI,YAAV,8BAAlE,eCleG6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASxH,OACP,cAAC,IAAMyH,WAAP,UACE,cAAC,EAAD,MAEFhL,SAAS8D,eAAe,SAM1BwG,K","file":"static/js/main.cd2cd529.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport './App.css';\nimport { usePdf } from '@mikecousins/react-pdf';\nimport { jsPDF } from 'jspdf';\nimport styled, { keyframes } from 'styled-components';\nimport { pulse, fadeIn } from 'react-animations';\n\n/**\n * @author Parssa Kyanzadeh\n *\n * Darco (Formerly called easyread) is an open-source\n * project that aims to better the lives of students\n * by allowing an easy way to convert any PDF into dark mode.\n *\n * Darco is still a work-in-progress with many features on the way!\n *  1. Themes for converted PDFs.\n *  2. A better PDF algorithm that utilizes PDFJS to smart convert\n *     pdf data on render, allowing for cleaner and smaller sized pdfs.\n *  3. Automation settings for easily converting pdfs on download.\n *  4. A Firefox/Chrome plugin.\n */\n\nlet pdfName = \"\"; // Name of the PDF\nlet originalBlob = \"\"; //\nlet hueRotateAmount = 0.5; // The amount to hue-rotate the image\nlet completionRatio = 0; // How close is the PDF to being complete\nlet pdfQuality = 0.8; // Quality level of the PDF\n\n// @ts-ignore\nwindow.app = this;\n\n// Animation stuff\nconst fadeInAnimation = keyframes`${fadeIn}`;\nconst pulseAnimation = keyframes`${pulse}`;\nconst PulseDiv = styled.div`\n  animation: 0.5s ${pulseAnimation};\n`;\n\nconst FadeDiv = styled.div`\n  animation: 1s ${fadeInAnimation};\n`;\n\n/**\n *  Inverts and hue rotates image, and returns new dark image\n * @param imageURL the toDataURL of the image\n */\nasync function invertImage(imageURL: string) {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.crossOrigin = \"\";\n    img.onload = draw;\n    img.src = imageURL;\n\n    /**\n     *  Draws image onto canvas and inverts the image data.\n     *  Had to manually input the invert and hue rotate here\n     *  because webkit does not support canvas draw filters.\n     *\n     *  P.S. this canvas is hidden with CSS\n     */\n    function draw() {\n      let canvas = document.querySelector(\"#dark-canvas\");\n      // @ts-ignore\n      let ctx = canvas.getContext(\"2d\");\n      // @ts-ignore\n      canvas.width = img.width;\n      // @ts-ignore\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n\n      // @ts-ignore\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      let data = imageData.data;\n      let invertAmount =1;\n      for (let i=0; i<data.length; i+=4) {\n        data[i + 0] = Math.abs(data[i + 0] - 255 * invertAmount);\n        data[i + 1] = Math.abs(data[i + 1] - 255 * invertAmount);\n        data[i + 2] = Math.abs(data[i + 2] - 255 * invertAmount);\n      }\n\n\n      const rotateAmount = hueRotateAmount;\n      const h = (rotateAmount % 1 + 1) % 1; // wraps the angle to unit interval, even when negative\n      const th = h * 3;\n      const thr = Math.floor(th);\n      const d = th - thr;\n      const b = 1 - d;\n      let ma, mb, mc;\n      let md, me, mf;\n      let mg, mh, mi;\n\n      switch (thr) {\n        case 0:\n          ma = b;\n          mb = 0;\n          mc = d;\n          md = d;\n          me = b;\n          mf = 0;\n          mg = 0;\n          mh = d;\n          mi = b;\n          break;\n        case 1:\n          ma = 0;\n          mb = d;\n          mc = b;\n          md = b;\n          me = 0;\n          mf = d;\n          mg = d;\n          mh = b;\n          mi = 0;\n          break;\n        case 2:\n          ma = d;\n          mb = b;\n          mc = 0;\n          md = 0;\n          me = d;\n          mf = b;\n          mg = b;\n          mh = 0;\n          mi = d;\n          break;\n      }\n      // do the pixels\n      let place = 0;\n      // @ts-ignore\n      for (let y = 0; y < canvas.height; ++y) {\n        // @ts-ignore\n        for (let x = 0; x < canvas.width; ++x) {\n          // @ts-ignore\n          place = 4 * (y * canvas.width + x);\n\n          const ir = data[place + 0];\n          const ig = data[place + 1];\n          const ib = data[place + 2];\n\n          data[place + 0] = Math.floor(ma * ir + mb * ig + mc * ib);\n          data[place + 1] = Math.floor(md * ir + me * ig + mf * ib);\n          data[place + 2] = Math.floor(mg * ir + mh * ig + mi * ib);\n        }\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n\n      // TODO check if not webview, and if not, do this instead.\n      // filter\n      /*\n      // @ts-ignore\n      ctx.filter = \"invert(1) hue-rotate(150grad)\";\n      // @ts-ignore\n      */\n      // @ts-ignore\n      resolve(canvas.toDataURL('image/jpeg', pdfQuality));\n\n      // resolve(canvas.toDataURL('image/jpeg', pdfQuality));\n    }\n  })\n}\n\n/**\n *  Converts each page of the pdf into an image based\n *  on the viewport and converts them into images\n *  and then inverts + hue rotates them\n * @param pdfDocument: pdfDocument to convert\n */\nasync function invertPdfPages(pdfDocument): Promise<Array<string>> {\n  let imageArray = [];\n  const rotate = 0;\n  const scale = 2;\n\n  for (let i = 1; i <= pdfDocument.numPages; i++) {\n    const canvasEl = document.createElement('canvas');\n    const page = await pdfDocument.getPage(i);\n\n    const rotation = rotate === 0 ? page.rotate : page.rotate + rotate;\n    const dpRatio = window.devicePixelRatio;\n    const adjustedScale = scale * dpRatio;\n    const viewport = page.getViewport({ scale: adjustedScale, rotation });\n\n    const canvasContext = canvasEl.getContext('2d');\n\n    canvasEl.style.width = `${viewport.width / dpRatio}px`;\n    canvasEl.style.height = `${viewport.height / dpRatio}px`;\n    canvasEl.height = viewport.height;\n    canvasEl.width = viewport.width;\n\n    await page.render({\n      canvasContext,\n      viewport,\n    }).promise;\n\n    let invertedURL = await invertImage(canvasEl.toDataURL());\n\n    completionRatio = (i / pdfDocument.numPages) * 100;\n    console.log(completionRatio);\n    const darkImage = document.createElement(\"img\");\n    // @ts-ignore\n    darkImage.src = invertedURL;\n\n    // @ts-ignore\n    imageArray.push(invertedURL);\n  }\n\n  return imageArray;\n}\n\nasync function determineOrientation() {\n  let canvas = document.getElementById(\"preparecanvas\");\n  // @ts-ignore\n  let width = canvas.width;\n  // @ts-ignore\n  let height = canvas.height;\n  if (height >= width) {\n    return 'p'\n  } else return 'l'\n}\n\n/**\n *  Takes all of the inverted images and returns them back into a pdf\n * @param imageArray: array of inverted images\n * @param orientation: 'p' for portrait, 'l' for landscape\n */\nasync function imagesToPDF(imageArray: Array<string>, orientation: String) {\n  return new Promise(resolve => {\n    // @ts-ignore\n    let doc = new jsPDF(orientation, 'mm');\n\n    for (let i = 0; i < imageArray.length; i++) {\n      if (i !== imageArray.length - 1) doc.addPage();\n\n      doc.setPage(i+1);\n      const imgData = imageArray[i];\n\n      const width = doc.internal.pageSize.getWidth();\n      const height = doc.internal.pageSize.getHeight();\n\n      doc.setFillColor('#000000');\n      doc.rect(0, 0, width, height);\n      // @ts-ignore\n      doc.addImage(imgData, 0, 0, width, height);\n    }\n\n    let documentName = pdfName;\n    // let documentName = pdfName.concat(\"-better\");\n\n\n    // @ts-ignore\n    if (window.webkit){\n      // @ts-ignore\n      window.webkit.messageHandlers.getDocumentName.postMessage(documentName.concat(\".pdf\"))\n    }\n\n    let fileReader = new FileReader()\n    let base64;\n    let blobPDF = new Blob([doc.output('blob')], {type : 'application/pdf'});\n    // @ts-ignore\n    fileReader.readAsDataURL(blobPDF);\n    fileReader.onload = function(fileLoadedEvent) {\n      // @ts-ignore\n      base64 = fileLoadedEvent.target.result;\n      resolve(base64);\n      // @ts-ignore\n      if (!window.webkit)\n        doc.save(documentName.concat(\".pdf\"));\n    }\n\n  });\n}\n\n/**\n *  Helper function that gets the dataURL from a File object\n * @param file\n */\nfunction getDataUrlFromFile(file) {\n  console.log(file)\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      // @ts-ignore\n      originalBlob = reader.result.slice(28);\n      console.log(\"Finito.\");\n      resolve(reader.result);\n    }, false);\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction PdfPreview(props) {\n  const [page, setPage] = useState(1);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [scale, setScale] = useState(1);\n  const [progress, setProgress] = useState(0);\n  const [buttonText, setButtonText] = useState(\"Convert PDF\");\n\n  let { pdfDocument, pdfPage } = usePdf({\n    file: props.dataUrl,\n    page,\n    canvasRef,\n    workerSrc: \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.228/pdf.worker.js\",\n    scale: scale\n  });\n\n\n  useEffect(() => {\n    if (pdfDocument !== undefined && canvasRef.current) {\n      if (canvasRef.current.width <= 350) {\n        setScale(1)\n      }\n    }\n  })\n\n  // @ts-ignore\n  window.generateDark = async () => {\n    const orientation = await determineOrientation();\n    const imageArray = await invertPdfPages(pdfDocument);\n    const finalBase64 = await imagesToPDF(imageArray, orientation);\n\n    // @ts-ignore\n    if (window.webkit) {\n      // @ts-ignore\n      window.webkit.messageHandlers.openDocument.postMessage(finalBase64)\n    }\n  }\n\n  return (\n      <div>\n        {!pdfDocument ? null\n            : <button className={\"custom-file-upload\"}\n                      id={\"readytoconvert\"}\n                      onClick={async () => {\n                        setButtonText(\"Converting...\");\n                        const orientation = await determineOrientation();\n                        const imageArray = await invertPdfPages(pdfDocument);\n                        const finalBase64 = await imagesToPDF(imageArray, orientation);\n                        if (completionRatio == 100) {\n                          setButtonText(\"Converted!\");\n                        }\n                        // @ts-ignore\n                        if (window.webkit) {\n                          // @ts-ignore\n                          window.webkit.messageHandlers.openDocument.postMessage(finalBase64)\n                        }\n\n                      }}>{buttonText}</button>}\n\n        {!pdfDocument ? null : <FadeDiv><button className={\"heading\"}\n                                                id={\"back-button\"}\n                                                onClick={ () => {\n                                                  props.onCancelClick();\n                                                }}>Go back</button></FadeDiv>}\n        <div>\n          {progress != completionRatio ? setProgress(completionRatio) : null}\n          <canvas ref={canvasRef} id={\"preparecanvas\"} />\n        </div>\n        <div>\n          <canvas id=\"dark-canvas\"/>\n        </div>\n      </div>\n  );\n}\n\n\n/**\n *  Helper function that gets the dataURL from a Blob object\n * @param blob: blob to convert\n * @param callback: the dataURL\n */\nfunction blobToDataURL(blob, callback) {\n  const a = new FileReader();\n  a.onload = function(e) {\n    // @ts-ignore\n    callback(e.target.result);\n    a.readAsDataURL(blob);\n  }\n}\n\nconst b64toBlob = (b64Data, contentType='', sliceSize=512) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    // @ts-ignore\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, {type: contentType});\n  return blob;\n}\n\nfunction App() {\n  const [dataUrl, setDataUrl] = useState(null);\n  const [quality, setQuality] = useState(true);\n  const [base64Data, setBase64Data] = useState(null);\n\n  // @ts-ignore\n  window.recieveDataFromSwift = async (baseData, fileName) => {\n    pdfName = fileName;\n    // @ts-ignore\n    window.webkit.messageHandlers.jsError.postMessage(\"Entered function\");\n    setBase64Data(baseData);\n  }\n\n  // @ts-ignore\n  useEffect(async () => {\n    if (base64Data !== null && dataUrl == null) {\n      const blob = b64toBlob(base64Data, \"application/pdf\");\n      const blobUrl = URL.createObjectURL(blob);\n      // @ts-ignore\n      window.webkit.messageHandlers.jsError.postMessage(blobUrl.substr(0, blobUrl.length - 10));\n      // @ts-ignore\n      setDataUrl(blobUrl);\n    }\n  })\n\n  return  (\n      <div>\n        <div className={\"heading\"}>\n          <h2>Welcome to</h2>\n          <h1>Darco</h1>\n          <button className={\"custom-file-upload\"}\n                  id={\"changeQuality\"}\n                  onClick={ () => {\n                    setQuality(!quality)\n                    pdfQuality = quality ? 0.3 : 0.8\n                  }}>{quality ? \"High Quality\" : \"Low Quality\"}</button>\n        </div>\n        {dataUrl ? null : <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n          <i className=\"fa fa-cloud-upload\"></i> Select PDF\n        </label>}\n        <input id=\"file-upload\"type=\"file\"\n               onChange={async (evt) => {\n                 const files = evt.target.files;\n\n                 // @ts-ignore\n                 if (files.length) {\n                   // Picked a file.\n\n                   if (files) {\n                     console.log(files[0]);\n                   }\n                   // @ts-ignore\n                   pdfName = files[0].name.substring(0, files[0].name.lastIndexOf('.'))\n\n                   // @ts-ignore\n                   const newDataUrl = await getDataUrlFromFile(files[0]);\n\n                   // @ts-ignore\n                   setDataUrl(newDataUrl);\n                 }\n               }}\n               accept=\"application/pdf\"\n        />\n        {dataUrl ? <PdfPreview dataUrl={dataUrl} onCancelClick={ () => {\n          setDataUrl(null);\n          setBase64Data(null);\n        }\n\n        }/> : null}\n\n\n        {!dataUrl ? <PulseDiv><div className={\"introPage\"}>\n          <h1 style={{\n            marginTop: 65,\n            marginLeft: 20\n          }}>Please <span>select</span> a PDF</h1>\n          <h1 style={{\n            marginTop: 160,\n            textAlign: \"right\",\n            marginLeft: 330,\n            marginRight: 20\n          }}>And we will<br/>convert it<br/> to a more</h1>\n          <span\n              style={{textAlign: \"right\",\n                marginTop: -20,\n                marginLeft: 312,\n                marginRight: 20}}\n              id={\"eye-friendly\"}>eye-friendly</span>\n          <h1 style={{\n            marginTop: 0,\n            textAlign: \"right\",\n            marginLeft: 343,\n            marginRight: 10}}>alternative</h1>\n        </div></PulseDiv> : null}\n        <div className={\"rightside\"}>\n          <div id={\"bragbox\"}>\n            <p> An <span id={\"highlight\"}>open-source</span> project <br/>by  <span id={\"highlight\"}>Parssa Kyanzadeh</span> </p>\n          </div>\n        </div>\n      </div>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}